// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bmi.proto

#include "bmi.pb.h"
#include "bmi.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bmi {

static const char* BmiService_method_names[] = {
  "/bmi.BmiService/initialize",
  "/bmi.BmiService/update",
  "/bmi.BmiService/updateUntil",
  "/bmi.BmiService/updateFrac",
  "/bmi.BmiService/finalize",
  "/bmi.BmiService/runModel",
  "/bmi.BmiService/getComponentName",
  "/bmi.BmiService/getInputVarNameCount",
  "/bmi.BmiService/getOutputVarNameCount",
  "/bmi.BmiService/getInputVarNames",
  "/bmi.BmiService/getOutputVarNames",
  "/bmi.BmiService/getTimeUnits",
  "/bmi.BmiService/getTimeStep",
  "/bmi.BmiService/getCurrentTime",
  "/bmi.BmiService/getStartTime",
  "/bmi.BmiService/getEndTime",
  "/bmi.BmiService/getVarGrid",
  "/bmi.BmiService/getVarType",
  "/bmi.BmiService/getVarItemSize",
  "/bmi.BmiService/getVarUnits",
  "/bmi.BmiService/getVarNBytes",
  "/bmi.BmiService/getValue",
  "/bmi.BmiService/getValuePtr",
  "/bmi.BmiService/getValueAtIndices",
  "/bmi.BmiService/setValue",
  "/bmi.BmiService/setValuePtr",
  "/bmi.BmiService/setValueAtIndices",
  "/bmi.BmiService/getGridSize",
  "/bmi.BmiService/getGridType",
  "/bmi.BmiService/getGridRank",
  "/bmi.BmiService/getGridShape",
  "/bmi.BmiService/getGridSpacing",
  "/bmi.BmiService/getGridOrigin",
  "/bmi.BmiService/getGridX",
  "/bmi.BmiService/getGridY",
  "/bmi.BmiService/getGridZ",
  "/bmi.BmiService/getGridCellCount",
  "/bmi.BmiService/getGridPointCount",
  "/bmi.BmiService/getGridVertexCount",
  "/bmi.BmiService/getGridConnectivity",
  "/bmi.BmiService/getGridOffset",
};

std::unique_ptr< BmiService::Stub> BmiService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BmiService::Stub> stub(new BmiService::Stub(channel));
  return stub;
}

BmiService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_initialize_(BmiService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_update_(BmiService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updateUntil_(BmiService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updateFrac_(BmiService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_finalize_(BmiService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_runModel_(BmiService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getComponentName_(BmiService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getInputVarNameCount_(BmiService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getOutputVarNameCount_(BmiService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getInputVarNames_(BmiService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getOutputVarNames_(BmiService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTimeUnits_(BmiService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTimeStep_(BmiService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCurrentTime_(BmiService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getStartTime_(BmiService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getEndTime_(BmiService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getVarGrid_(BmiService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getVarType_(BmiService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getVarItemSize_(BmiService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getVarUnits_(BmiService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getVarNBytes_(BmiService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getValue_(BmiService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getValuePtr_(BmiService_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getValueAtIndices_(BmiService_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setValue_(BmiService_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setValuePtr_(BmiService_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setValueAtIndices_(BmiService_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridSize_(BmiService_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridType_(BmiService_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridRank_(BmiService_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridShape_(BmiService_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridSpacing_(BmiService_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridOrigin_(BmiService_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridX_(BmiService_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridY_(BmiService_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridZ_(BmiService_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridCellCount_(BmiService_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridPointCount_(BmiService_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridVertexCount_(BmiService_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridConnectivity_(BmiService_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGridOffset_(BmiService_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BmiService::Stub::initialize(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::bmi::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_initialize_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::AsyncinitializeRaw(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_initialize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::PrepareAsyncinitializeRaw(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_initialize_, context, request, false);
}

::grpc::Status BmiService::Stub::update(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_update_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::AsyncupdateRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_update_, context, request, false);
}

::grpc::Status BmiService::Stub::updateUntil(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::bmi::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_updateUntil_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::AsyncupdateUntilRaw(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_updateUntil_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::PrepareAsyncupdateUntilRaw(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_updateUntil_, context, request, false);
}

::grpc::Status BmiService::Stub::updateFrac(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::bmi::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_updateFrac_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::AsyncupdateFracRaw(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_updateFrac_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::PrepareAsyncupdateFracRaw(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_updateFrac_, context, request, false);
}

::grpc::Status BmiService::Stub::finalize(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_finalize_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::AsyncfinalizeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_finalize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::PrepareAsyncfinalizeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_finalize_, context, request, false);
}

::grpc::Status BmiService::Stub::runModel(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_runModel_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::AsyncrunModelRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_runModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::PrepareAsyncrunModelRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_runModel_, context, request, false);
}

::grpc::Status BmiService::Stub::getComponentName(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetComponentNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getComponentName_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetComponentNameResponse>* BmiService::Stub::AsyncgetComponentNameRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetComponentNameResponse>::Create(channel_.get(), cq, rpcmethod_getComponentName_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetComponentNameResponse>* BmiService::Stub::PrepareAsyncgetComponentNameRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetComponentNameResponse>::Create(channel_.get(), cq, rpcmethod_getComponentName_, context, request, false);
}

::grpc::Status BmiService::Stub::getInputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNameCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getInputVarNameCount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>* BmiService::Stub::AsyncgetInputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarNameCountResponse>::Create(channel_.get(), cq, rpcmethod_getInputVarNameCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>* BmiService::Stub::PrepareAsyncgetInputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarNameCountResponse>::Create(channel_.get(), cq, rpcmethod_getInputVarNameCount_, context, request, false);
}

::grpc::Status BmiService::Stub::getOutputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNameCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getOutputVarNameCount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>* BmiService::Stub::AsyncgetOutputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarNameCountResponse>::Create(channel_.get(), cq, rpcmethod_getOutputVarNameCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>* BmiService::Stub::PrepareAsyncgetOutputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarNameCountResponse>::Create(channel_.get(), cq, rpcmethod_getOutputVarNameCount_, context, request, false);
}

::grpc::Status BmiService::Stub::getInputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNamesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getInputVarNames_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>* BmiService::Stub::AsyncgetInputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarNamesResponse>::Create(channel_.get(), cq, rpcmethod_getInputVarNames_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>* BmiService::Stub::PrepareAsyncgetInputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarNamesResponse>::Create(channel_.get(), cq, rpcmethod_getInputVarNames_, context, request, false);
}

::grpc::Status BmiService::Stub::getOutputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNamesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getOutputVarNames_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>* BmiService::Stub::AsyncgetOutputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarNamesResponse>::Create(channel_.get(), cq, rpcmethod_getOutputVarNames_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>* BmiService::Stub::PrepareAsyncgetOutputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarNamesResponse>::Create(channel_.get(), cq, rpcmethod_getOutputVarNames_, context, request, false);
}

::grpc::Status BmiService::Stub::getTimeUnits(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeUnitsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getTimeUnits_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetTimeUnitsResponse>* BmiService::Stub::AsyncgetTimeUnitsRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetTimeUnitsResponse>::Create(channel_.get(), cq, rpcmethod_getTimeUnits_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetTimeUnitsResponse>* BmiService::Stub::PrepareAsyncgetTimeUnitsRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetTimeUnitsResponse>::Create(channel_.get(), cq, rpcmethod_getTimeUnits_, context, request, false);
}

::grpc::Status BmiService::Stub::getTimeStep(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeStepResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getTimeStep_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetTimeStepResponse>* BmiService::Stub::AsyncgetTimeStepRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetTimeStepResponse>::Create(channel_.get(), cq, rpcmethod_getTimeStep_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetTimeStepResponse>* BmiService::Stub::PrepareAsyncgetTimeStepRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetTimeStepResponse>::Create(channel_.get(), cq, rpcmethod_getTimeStep_, context, request, false);
}

::grpc::Status BmiService::Stub::getCurrentTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getCurrentTime_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* BmiService::Stub::AsyncgetCurrentTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetTimeResponse>::Create(channel_.get(), cq, rpcmethod_getCurrentTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* BmiService::Stub::PrepareAsyncgetCurrentTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetTimeResponse>::Create(channel_.get(), cq, rpcmethod_getCurrentTime_, context, request, false);
}

::grpc::Status BmiService::Stub::getStartTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getStartTime_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* BmiService::Stub::AsyncgetStartTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetTimeResponse>::Create(channel_.get(), cq, rpcmethod_getStartTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* BmiService::Stub::PrepareAsyncgetStartTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetTimeResponse>::Create(channel_.get(), cq, rpcmethod_getStartTime_, context, request, false);
}

::grpc::Status BmiService::Stub::getEndTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getEndTime_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* BmiService::Stub::AsyncgetEndTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetTimeResponse>::Create(channel_.get(), cq, rpcmethod_getEndTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* BmiService::Stub::PrepareAsyncgetEndTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetTimeResponse>::Create(channel_.get(), cq, rpcmethod_getEndTime_, context, request, false);
}

::grpc::Status BmiService::Stub::getVarGrid(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarGridResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getVarGrid_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarGridResponse>* BmiService::Stub::AsyncgetVarGridRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarGridResponse>::Create(channel_.get(), cq, rpcmethod_getVarGrid_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarGridResponse>* BmiService::Stub::PrepareAsyncgetVarGridRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarGridResponse>::Create(channel_.get(), cq, rpcmethod_getVarGrid_, context, request, false);
}

::grpc::Status BmiService::Stub::getVarType(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getVarType_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarTypeResponse>* BmiService::Stub::AsyncgetVarTypeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarTypeResponse>::Create(channel_.get(), cq, rpcmethod_getVarType_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarTypeResponse>* BmiService::Stub::PrepareAsyncgetVarTypeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarTypeResponse>::Create(channel_.get(), cq, rpcmethod_getVarType_, context, request, false);
}

::grpc::Status BmiService::Stub::getVarItemSize(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarItemSizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getVarItemSize_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarItemSizeResponse>* BmiService::Stub::AsyncgetVarItemSizeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarItemSizeResponse>::Create(channel_.get(), cq, rpcmethod_getVarItemSize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarItemSizeResponse>* BmiService::Stub::PrepareAsyncgetVarItemSizeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarItemSizeResponse>::Create(channel_.get(), cq, rpcmethod_getVarItemSize_, context, request, false);
}

::grpc::Status BmiService::Stub::getVarUnits(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarUnitsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getVarUnits_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarUnitsResponse>* BmiService::Stub::AsyncgetVarUnitsRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarUnitsResponse>::Create(channel_.get(), cq, rpcmethod_getVarUnits_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarUnitsResponse>* BmiService::Stub::PrepareAsyncgetVarUnitsRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarUnitsResponse>::Create(channel_.get(), cq, rpcmethod_getVarUnits_, context, request, false);
}

::grpc::Status BmiService::Stub::getVarNBytes(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarNBytesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getVarNBytes_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarNBytesResponse>* BmiService::Stub::AsyncgetVarNBytesRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarNBytesResponse>::Create(channel_.get(), cq, rpcmethod_getVarNBytes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetVarNBytesResponse>* BmiService::Stub::PrepareAsyncgetVarNBytesRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetVarNBytesResponse>::Create(channel_.get(), cq, rpcmethod_getVarNBytes_, context, request, false);
}

::grpc::Status BmiService::Stub::getValue(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetValueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getValue_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetValueResponse>* BmiService::Stub::AsyncgetValueRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetValueResponse>::Create(channel_.get(), cq, rpcmethod_getValue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetValueResponse>* BmiService::Stub::PrepareAsyncgetValueRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetValueResponse>::Create(channel_.get(), cq, rpcmethod_getValue_, context, request, false);
}

::grpc::Status BmiService::Stub::getValuePtr(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getValuePtr_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::AsyncgetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_getValuePtr_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::PrepareAsyncgetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_getValuePtr_, context, request, false);
}

::grpc::Status BmiService::Stub::getValueAtIndices(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::bmi::GetValueAtIndicesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getValueAtIndices_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetValueAtIndicesResponse>* BmiService::Stub::AsyncgetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetValueAtIndicesResponse>::Create(channel_.get(), cq, rpcmethod_getValueAtIndices_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetValueAtIndicesResponse>* BmiService::Stub::PrepareAsyncgetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetValueAtIndicesResponse>::Create(channel_.get(), cq, rpcmethod_getValueAtIndices_, context, request, false);
}

::grpc::Status BmiService::Stub::setValue(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::bmi::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setValue_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::AsyncsetValueRaw(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_setValue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::PrepareAsyncsetValueRaw(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_setValue_, context, request, false);
}

::grpc::Status BmiService::Stub::setValuePtr(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::bmi::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setValuePtr_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::AsyncsetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_setValuePtr_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::PrepareAsyncsetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_setValuePtr_, context, request, false);
}

::grpc::Status BmiService::Stub::setValueAtIndices(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::bmi::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setValueAtIndices_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::AsyncsetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_setValueAtIndices_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::Empty>* BmiService::Stub::PrepareAsyncsetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::Empty>::Create(channel_.get(), cq, rpcmethod_setValueAtIndices_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridSize(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridSizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridSize_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridSizeResponse>* BmiService::Stub::AsyncgetGridSizeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridSizeResponse>::Create(channel_.get(), cq, rpcmethod_getGridSize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridSizeResponse>* BmiService::Stub::PrepareAsyncgetGridSizeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridSizeResponse>::Create(channel_.get(), cq, rpcmethod_getGridSize_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridType(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridType_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridTypeResponse>* BmiService::Stub::AsyncgetGridTypeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridTypeResponse>::Create(channel_.get(), cq, rpcmethod_getGridType_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridTypeResponse>* BmiService::Stub::PrepareAsyncgetGridTypeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridTypeResponse>::Create(channel_.get(), cq, rpcmethod_getGridType_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridRank(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridRankResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridRank_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridRankResponse>* BmiService::Stub::AsyncgetGridRankRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridRankResponse>::Create(channel_.get(), cq, rpcmethod_getGridRank_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridRankResponse>* BmiService::Stub::PrepareAsyncgetGridRankRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridRankResponse>::Create(channel_.get(), cq, rpcmethod_getGridRank_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridShape(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridShapeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridShape_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridShapeResponse>* BmiService::Stub::AsyncgetGridShapeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridShapeResponse>::Create(channel_.get(), cq, rpcmethod_getGridShape_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridShapeResponse>* BmiService::Stub::PrepareAsyncgetGridShapeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridShapeResponse>::Create(channel_.get(), cq, rpcmethod_getGridShape_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridSpacing(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridSpacingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridSpacing_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridSpacingResponse>* BmiService::Stub::AsyncgetGridSpacingRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridSpacingResponse>::Create(channel_.get(), cq, rpcmethod_getGridSpacing_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridSpacingResponse>* BmiService::Stub::PrepareAsyncgetGridSpacingRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridSpacingResponse>::Create(channel_.get(), cq, rpcmethod_getGridSpacing_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridOrigin(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridOriginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridOrigin_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridOriginResponse>* BmiService::Stub::AsyncgetGridOriginRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridOriginResponse>::Create(channel_.get(), cq, rpcmethod_getGridOrigin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridOriginResponse>* BmiService::Stub::PrepareAsyncgetGridOriginRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridOriginResponse>::Create(channel_.get(), cq, rpcmethod_getGridOrigin_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridX(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridX_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* BmiService::Stub::AsyncgetGridXRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridPointsResponse>::Create(channel_.get(), cq, rpcmethod_getGridX_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* BmiService::Stub::PrepareAsyncgetGridXRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridPointsResponse>::Create(channel_.get(), cq, rpcmethod_getGridX_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridY(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridY_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* BmiService::Stub::AsyncgetGridYRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridPointsResponse>::Create(channel_.get(), cq, rpcmethod_getGridY_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* BmiService::Stub::PrepareAsyncgetGridYRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridPointsResponse>::Create(channel_.get(), cq, rpcmethod_getGridY_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridZ(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridZ_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* BmiService::Stub::AsyncgetGridZRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridPointsResponse>::Create(channel_.get(), cq, rpcmethod_getGridZ_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* BmiService::Stub::PrepareAsyncgetGridZRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridPointsResponse>::Create(channel_.get(), cq, rpcmethod_getGridZ_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridCellCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridCellCount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* BmiService::Stub::AsyncgetGridCellCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetCountResponse>::Create(channel_.get(), cq, rpcmethod_getGridCellCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* BmiService::Stub::PrepareAsyncgetGridCellCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetCountResponse>::Create(channel_.get(), cq, rpcmethod_getGridCellCount_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridPointCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridPointCount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* BmiService::Stub::AsyncgetGridPointCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetCountResponse>::Create(channel_.get(), cq, rpcmethod_getGridPointCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* BmiService::Stub::PrepareAsyncgetGridPointCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetCountResponse>::Create(channel_.get(), cq, rpcmethod_getGridPointCount_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridVertexCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridVertexCount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* BmiService::Stub::AsyncgetGridVertexCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetCountResponse>::Create(channel_.get(), cq, rpcmethod_getGridVertexCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* BmiService::Stub::PrepareAsyncgetGridVertexCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetCountResponse>::Create(channel_.get(), cq, rpcmethod_getGridVertexCount_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridConnectivity(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridConnectivityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridConnectivity_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridConnectivityResponse>* BmiService::Stub::AsyncgetGridConnectivityRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridConnectivityResponse>::Create(channel_.get(), cq, rpcmethod_getGridConnectivity_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridConnectivityResponse>* BmiService::Stub::PrepareAsyncgetGridConnectivityRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridConnectivityResponse>::Create(channel_.get(), cq, rpcmethod_getGridConnectivity_, context, request, false);
}

::grpc::Status BmiService::Stub::getGridOffset(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridOffsetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getGridOffset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridOffsetResponse>* BmiService::Stub::AsyncgetGridOffsetRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridOffsetResponse>::Create(channel_.get(), cq, rpcmethod_getGridOffset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bmi::GetGridOffsetResponse>* BmiService::Stub::PrepareAsyncgetGridOffsetRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bmi::GetGridOffsetResponse>::Create(channel_.get(), cq, rpcmethod_getGridOffset_, context, request, false);
}

BmiService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::InitializeRequest, ::bmi::Empty>(
          std::mem_fn(&BmiService::Service::initialize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::Empty>(
          std::mem_fn(&BmiService::Service::update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::UpdateUntilRequest, ::bmi::Empty>(
          std::mem_fn(&BmiService::Service::updateUntil), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::UpdateFracRequest, ::bmi::Empty>(
          std::mem_fn(&BmiService::Service::updateFrac), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::Empty>(
          std::mem_fn(&BmiService::Service::finalize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::Empty>(
          std::mem_fn(&BmiService::Service::runModel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::GetComponentNameResponse>(
          std::mem_fn(&BmiService::Service::getComponentName), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::GetVarNameCountResponse>(
          std::mem_fn(&BmiService::Service::getInputVarNameCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::GetVarNameCountResponse>(
          std::mem_fn(&BmiService::Service::getOutputVarNameCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::GetVarNamesResponse>(
          std::mem_fn(&BmiService::Service::getInputVarNames), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::GetVarNamesResponse>(
          std::mem_fn(&BmiService::Service::getOutputVarNames), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::GetTimeUnitsResponse>(
          std::mem_fn(&BmiService::Service::getTimeUnits), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::GetTimeStepResponse>(
          std::mem_fn(&BmiService::Service::getTimeStep), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::GetTimeResponse>(
          std::mem_fn(&BmiService::Service::getCurrentTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::GetTimeResponse>(
          std::mem_fn(&BmiService::Service::getStartTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::Empty, ::bmi::GetTimeResponse>(
          std::mem_fn(&BmiService::Service::getEndTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GetVarRequest, ::bmi::GetVarGridResponse>(
          std::mem_fn(&BmiService::Service::getVarGrid), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GetVarRequest, ::bmi::GetVarTypeResponse>(
          std::mem_fn(&BmiService::Service::getVarType), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GetVarRequest, ::bmi::GetVarItemSizeResponse>(
          std::mem_fn(&BmiService::Service::getVarItemSize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GetVarRequest, ::bmi::GetVarUnitsResponse>(
          std::mem_fn(&BmiService::Service::getVarUnits), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GetVarRequest, ::bmi::GetVarNBytesResponse>(
          std::mem_fn(&BmiService::Service::getVarNBytes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GetVarRequest, ::bmi::GetValueResponse>(
          std::mem_fn(&BmiService::Service::getValue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GetVarRequest, ::bmi::Empty>(
          std::mem_fn(&BmiService::Service::getValuePtr), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GetValueAtIndicesRequest, ::bmi::GetValueAtIndicesResponse>(
          std::mem_fn(&BmiService::Service::getValueAtIndices), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::SetValueRequest, ::bmi::Empty>(
          std::mem_fn(&BmiService::Service::setValue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::SetValuePtrRequest, ::bmi::Empty>(
          std::mem_fn(&BmiService::Service::setValuePtr), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::SetValueAtIndicesRequest, ::bmi::Empty>(
          std::mem_fn(&BmiService::Service::setValueAtIndices), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetGridSizeResponse>(
          std::mem_fn(&BmiService::Service::getGridSize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetGridTypeResponse>(
          std::mem_fn(&BmiService::Service::getGridType), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetGridRankResponse>(
          std::mem_fn(&BmiService::Service::getGridRank), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetGridShapeResponse>(
          std::mem_fn(&BmiService::Service::getGridShape), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetGridSpacingResponse>(
          std::mem_fn(&BmiService::Service::getGridSpacing), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetGridOriginResponse>(
          std::mem_fn(&BmiService::Service::getGridOrigin), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetGridPointsResponse>(
          std::mem_fn(&BmiService::Service::getGridX), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetGridPointsResponse>(
          std::mem_fn(&BmiService::Service::getGridY), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetGridPointsResponse>(
          std::mem_fn(&BmiService::Service::getGridZ), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetCountResponse>(
          std::mem_fn(&BmiService::Service::getGridCellCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetCountResponse>(
          std::mem_fn(&BmiService::Service::getGridPointCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetCountResponse>(
          std::mem_fn(&BmiService::Service::getGridVertexCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetGridConnectivityResponse>(
          std::mem_fn(&BmiService::Service::getGridConnectivity), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BmiService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BmiService::Service, ::bmi::GridRequest, ::bmi::GetGridOffsetResponse>(
          std::mem_fn(&BmiService::Service::getGridOffset), this)));
}

BmiService::Service::~Service() {
}

::grpc::Status BmiService::Service::initialize(::grpc::ServerContext* context, const ::bmi::InitializeRequest* request, ::bmi::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::update(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::updateUntil(::grpc::ServerContext* context, const ::bmi::UpdateUntilRequest* request, ::bmi::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::updateFrac(::grpc::ServerContext* context, const ::bmi::UpdateFracRequest* request, ::bmi::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::finalize(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::runModel(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getComponentName(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetComponentNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getInputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getOutputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getInputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getOutputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getTimeUnits(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeUnitsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getTimeStep(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeStepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getCurrentTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getStartTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getEndTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getVarGrid(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarGridResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getVarType(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getVarItemSize(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarItemSizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getVarUnits(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarUnitsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getVarNBytes(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarNBytesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getValue(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetValueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getValuePtr(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getValueAtIndices(::grpc::ServerContext* context, const ::bmi::GetValueAtIndicesRequest* request, ::bmi::GetValueAtIndicesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::setValue(::grpc::ServerContext* context, const ::bmi::SetValueRequest* request, ::bmi::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::setValuePtr(::grpc::ServerContext* context, const ::bmi::SetValuePtrRequest* request, ::bmi::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::setValueAtIndices(::grpc::ServerContext* context, const ::bmi::SetValueAtIndicesRequest* request, ::bmi::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridSize(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridType(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridRank(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridRankResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridShape(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridShapeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridSpacing(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSpacingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridOrigin(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOriginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridX(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridY(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridZ(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridCellCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridPointCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridVertexCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridConnectivity(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridConnectivityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BmiService::Service::getGridOffset(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOffsetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bmi

