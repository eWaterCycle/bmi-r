// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bmi.proto
#ifndef GRPC_bmi_2eproto__INCLUDED
#define GRPC_bmi_2eproto__INCLUDED

#include "bmi.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace bmi {

class BmiService final {
 public:
  static constexpr char const* service_full_name() {
    return "bmi.BmiService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status initialize(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::bmi::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> Asyncinitialize(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(AsyncinitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> PrepareAsyncinitialize(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(PrepareAsyncinitializeRaw(context, request, cq));
    }
    virtual ::grpc::Status update(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> Asyncupdate(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> PrepareAsyncupdate(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(PrepareAsyncupdateRaw(context, request, cq));
    }
    virtual ::grpc::Status updateUntil(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::bmi::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> AsyncupdateUntil(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(AsyncupdateUntilRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> PrepareAsyncupdateUntil(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(PrepareAsyncupdateUntilRaw(context, request, cq));
    }
    virtual ::grpc::Status updateFrac(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::bmi::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> AsyncupdateFrac(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(AsyncupdateFracRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> PrepareAsyncupdateFrac(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(PrepareAsyncupdateFracRaw(context, request, cq));
    }
    virtual ::grpc::Status finalize(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> Asyncfinalize(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(AsyncfinalizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> PrepareAsyncfinalize(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(PrepareAsyncfinalizeRaw(context, request, cq));
    }
    virtual ::grpc::Status runModel(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> AsyncrunModel(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(AsyncrunModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> PrepareAsyncrunModel(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(PrepareAsyncrunModelRaw(context, request, cq));
    }
    virtual ::grpc::Status getComponentName(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetComponentNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetComponentNameResponse>> AsyncgetComponentName(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetComponentNameResponse>>(AsyncgetComponentNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetComponentNameResponse>> PrepareAsyncgetComponentName(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetComponentNameResponse>>(PrepareAsyncgetComponentNameRaw(context, request, cq));
    }
    virtual ::grpc::Status getInputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNameCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>> AsyncgetInputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>>(AsyncgetInputVarNameCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>> PrepareAsyncgetInputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>>(PrepareAsyncgetInputVarNameCountRaw(context, request, cq));
    }
    virtual ::grpc::Status getOutputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNameCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>> AsyncgetOutputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>>(AsyncgetOutputVarNameCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>> PrepareAsyncgetOutputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>>(PrepareAsyncgetOutputVarNameCountRaw(context, request, cq));
    }
    virtual ::grpc::Status getInputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNamesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>> AsyncgetInputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>>(AsyncgetInputVarNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>> PrepareAsyncgetInputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>>(PrepareAsyncgetInputVarNamesRaw(context, request, cq));
    }
    virtual ::grpc::Status getOutputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNamesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>> AsyncgetOutputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>>(AsyncgetOutputVarNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>> PrepareAsyncgetOutputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>>(PrepareAsyncgetOutputVarNamesRaw(context, request, cq));
    }
    virtual ::grpc::Status getTimeUnits(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeUnitsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeUnitsResponse>> AsyncgetTimeUnits(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeUnitsResponse>>(AsyncgetTimeUnitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeUnitsResponse>> PrepareAsyncgetTimeUnits(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeUnitsResponse>>(PrepareAsyncgetTimeUnitsRaw(context, request, cq));
    }
    virtual ::grpc::Status getTimeStep(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeStepResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeStepResponse>> AsyncgetTimeStep(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeStepResponse>>(AsyncgetTimeStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeStepResponse>> PrepareAsyncgetTimeStep(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeStepResponse>>(PrepareAsyncgetTimeStepRaw(context, request, cq));
    }
    virtual ::grpc::Status getCurrentTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>> AsyncgetCurrentTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>>(AsyncgetCurrentTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>> PrepareAsyncgetCurrentTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>>(PrepareAsyncgetCurrentTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status getStartTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>> AsyncgetStartTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>>(AsyncgetStartTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>> PrepareAsyncgetStartTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>>(PrepareAsyncgetStartTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status getEndTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>> AsyncgetEndTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>>(AsyncgetEndTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>> PrepareAsyncgetEndTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>>(PrepareAsyncgetEndTimeRaw(context, request, cq));
    }
    virtual ::grpc::Status getVarGrid(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarGridResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarGridResponse>> AsyncgetVarGrid(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarGridResponse>>(AsyncgetVarGridRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarGridResponse>> PrepareAsyncgetVarGrid(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarGridResponse>>(PrepareAsyncgetVarGridRaw(context, request, cq));
    }
    virtual ::grpc::Status getVarType(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarTypeResponse>> AsyncgetVarType(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarTypeResponse>>(AsyncgetVarTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarTypeResponse>> PrepareAsyncgetVarType(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarTypeResponse>>(PrepareAsyncgetVarTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status getVarItemSize(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarItemSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarItemSizeResponse>> AsyncgetVarItemSize(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarItemSizeResponse>>(AsyncgetVarItemSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarItemSizeResponse>> PrepareAsyncgetVarItemSize(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarItemSizeResponse>>(PrepareAsyncgetVarItemSizeRaw(context, request, cq));
    }
    virtual ::grpc::Status getVarUnits(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarUnitsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarUnitsResponse>> AsyncgetVarUnits(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarUnitsResponse>>(AsyncgetVarUnitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarUnitsResponse>> PrepareAsyncgetVarUnits(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarUnitsResponse>>(PrepareAsyncgetVarUnitsRaw(context, request, cq));
    }
    virtual ::grpc::Status getVarNBytes(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarNBytesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNBytesResponse>> AsyncgetVarNBytes(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNBytesResponse>>(AsyncgetVarNBytesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNBytesResponse>> PrepareAsyncgetVarNBytes(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNBytesResponse>>(PrepareAsyncgetVarNBytesRaw(context, request, cq));
    }
    virtual ::grpc::Status getValue(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetValueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueResponse>> AsyncgetValue(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueResponse>>(AsyncgetValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueResponse>> PrepareAsyncgetValue(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueResponse>>(PrepareAsyncgetValueRaw(context, request, cq));
    }
    virtual ::grpc::Status getValuePtr(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> AsyncgetValuePtr(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(AsyncgetValuePtrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> PrepareAsyncgetValuePtr(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(PrepareAsyncgetValuePtrRaw(context, request, cq));
    }
    virtual ::grpc::Status getValueAtIndices(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::bmi::GetValueAtIndicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueAtIndicesResponse>> AsyncgetValueAtIndices(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueAtIndicesResponse>>(AsyncgetValueAtIndicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueAtIndicesResponse>> PrepareAsyncgetValueAtIndices(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueAtIndicesResponse>>(PrepareAsyncgetValueAtIndicesRaw(context, request, cq));
    }
    virtual ::grpc::Status setValue(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::bmi::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> AsyncsetValue(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(AsyncsetValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> PrepareAsyncsetValue(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(PrepareAsyncsetValueRaw(context, request, cq));
    }
    virtual ::grpc::Status setValuePtr(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::bmi::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> AsyncsetValuePtr(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(AsyncsetValuePtrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> PrepareAsyncsetValuePtr(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(PrepareAsyncsetValuePtrRaw(context, request, cq));
    }
    virtual ::grpc::Status setValueAtIndices(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::bmi::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> AsyncsetValueAtIndices(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(AsyncsetValueAtIndicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>> PrepareAsyncsetValueAtIndices(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>>(PrepareAsyncsetValueAtIndicesRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridSize(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSizeResponse>> AsyncgetGridSize(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSizeResponse>>(AsyncgetGridSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSizeResponse>> PrepareAsyncgetGridSize(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSizeResponse>>(PrepareAsyncgetGridSizeRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridType(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridTypeResponse>> AsyncgetGridType(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridTypeResponse>>(AsyncgetGridTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridTypeResponse>> PrepareAsyncgetGridType(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridTypeResponse>>(PrepareAsyncgetGridTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridRank(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridRankResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridRankResponse>> AsyncgetGridRank(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridRankResponse>>(AsyncgetGridRankRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridRankResponse>> PrepareAsyncgetGridRank(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridRankResponse>>(PrepareAsyncgetGridRankRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridShape(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridShapeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridShapeResponse>> AsyncgetGridShape(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridShapeResponse>>(AsyncgetGridShapeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridShapeResponse>> PrepareAsyncgetGridShape(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridShapeResponse>>(PrepareAsyncgetGridShapeRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridSpacing(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridSpacingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSpacingResponse>> AsyncgetGridSpacing(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSpacingResponse>>(AsyncgetGridSpacingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSpacingResponse>> PrepareAsyncgetGridSpacing(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSpacingResponse>>(PrepareAsyncgetGridSpacingRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridOrigin(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridOriginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOriginResponse>> AsyncgetGridOrigin(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOriginResponse>>(AsyncgetGridOriginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOriginResponse>> PrepareAsyncgetGridOrigin(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOriginResponse>>(PrepareAsyncgetGridOriginRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridX(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridPointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>> AsyncgetGridX(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>>(AsyncgetGridXRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>> PrepareAsyncgetGridX(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>>(PrepareAsyncgetGridXRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridY(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridPointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>> AsyncgetGridY(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>>(AsyncgetGridYRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>> PrepareAsyncgetGridY(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>>(PrepareAsyncgetGridYRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridZ(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridPointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>> AsyncgetGridZ(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>>(AsyncgetGridZRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>> PrepareAsyncgetGridZ(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>>(PrepareAsyncgetGridZRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridCellCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>> AsyncgetGridCellCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>>(AsyncgetGridCellCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>> PrepareAsyncgetGridCellCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>>(PrepareAsyncgetGridCellCountRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridPointCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>> AsyncgetGridPointCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>>(AsyncgetGridPointCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>> PrepareAsyncgetGridPointCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>>(PrepareAsyncgetGridPointCountRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridVertexCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetCountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>> AsyncgetGridVertexCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>>(AsyncgetGridVertexCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>> PrepareAsyncgetGridVertexCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>>(PrepareAsyncgetGridVertexCountRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridConnectivity(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridConnectivityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridConnectivityResponse>> AsyncgetGridConnectivity(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridConnectivityResponse>>(AsyncgetGridConnectivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridConnectivityResponse>> PrepareAsyncgetGridConnectivity(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridConnectivityResponse>>(PrepareAsyncgetGridConnectivityRaw(context, request, cq));
    }
    virtual ::grpc::Status getGridOffset(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridOffsetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOffsetResponse>> AsyncgetGridOffset(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOffsetResponse>>(AsyncgetGridOffsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOffsetResponse>> PrepareAsyncgetGridOffset(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOffsetResponse>>(PrepareAsyncgetGridOffsetRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* AsyncinitializeRaw(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* PrepareAsyncinitializeRaw(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* AsyncupdateRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* AsyncupdateUntilRaw(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* PrepareAsyncupdateUntilRaw(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* AsyncupdateFracRaw(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* PrepareAsyncupdateFracRaw(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* AsyncfinalizeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* PrepareAsyncfinalizeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* AsyncrunModelRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* PrepareAsyncrunModelRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetComponentNameResponse>* AsyncgetComponentNameRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetComponentNameResponse>* PrepareAsyncgetComponentNameRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>* AsyncgetInputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>* PrepareAsyncgetInputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>* AsyncgetOutputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNameCountResponse>* PrepareAsyncgetOutputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>* AsyncgetInputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>* PrepareAsyncgetInputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>* AsyncgetOutputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNamesResponse>* PrepareAsyncgetOutputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeUnitsResponse>* AsyncgetTimeUnitsRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeUnitsResponse>* PrepareAsyncgetTimeUnitsRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeStepResponse>* AsyncgetTimeStepRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeStepResponse>* PrepareAsyncgetTimeStepRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>* AsyncgetCurrentTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>* PrepareAsyncgetCurrentTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>* AsyncgetStartTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>* PrepareAsyncgetStartTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>* AsyncgetEndTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetTimeResponse>* PrepareAsyncgetEndTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarGridResponse>* AsyncgetVarGridRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarGridResponse>* PrepareAsyncgetVarGridRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarTypeResponse>* AsyncgetVarTypeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarTypeResponse>* PrepareAsyncgetVarTypeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarItemSizeResponse>* AsyncgetVarItemSizeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarItemSizeResponse>* PrepareAsyncgetVarItemSizeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarUnitsResponse>* AsyncgetVarUnitsRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarUnitsResponse>* PrepareAsyncgetVarUnitsRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNBytesResponse>* AsyncgetVarNBytesRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetVarNBytesResponse>* PrepareAsyncgetVarNBytesRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueResponse>* AsyncgetValueRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueResponse>* PrepareAsyncgetValueRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* AsyncgetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* PrepareAsyncgetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueAtIndicesResponse>* AsyncgetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetValueAtIndicesResponse>* PrepareAsyncgetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* AsyncsetValueRaw(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* PrepareAsyncsetValueRaw(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* AsyncsetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* PrepareAsyncsetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* AsyncsetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::Empty>* PrepareAsyncsetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSizeResponse>* AsyncgetGridSizeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSizeResponse>* PrepareAsyncgetGridSizeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridTypeResponse>* AsyncgetGridTypeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridTypeResponse>* PrepareAsyncgetGridTypeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridRankResponse>* AsyncgetGridRankRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridRankResponse>* PrepareAsyncgetGridRankRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridShapeResponse>* AsyncgetGridShapeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridShapeResponse>* PrepareAsyncgetGridShapeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSpacingResponse>* AsyncgetGridSpacingRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridSpacingResponse>* PrepareAsyncgetGridSpacingRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOriginResponse>* AsyncgetGridOriginRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOriginResponse>* PrepareAsyncgetGridOriginRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>* AsyncgetGridXRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>* PrepareAsyncgetGridXRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>* AsyncgetGridYRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>* PrepareAsyncgetGridYRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>* AsyncgetGridZRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridPointsResponse>* PrepareAsyncgetGridZRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>* AsyncgetGridCellCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>* PrepareAsyncgetGridCellCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>* AsyncgetGridPointCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>* PrepareAsyncgetGridPointCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>* AsyncgetGridVertexCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetCountResponse>* PrepareAsyncgetGridVertexCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridConnectivityResponse>* AsyncgetGridConnectivityRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridConnectivityResponse>* PrepareAsyncgetGridConnectivityRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOffsetResponse>* AsyncgetGridOffsetRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bmi::GetGridOffsetResponse>* PrepareAsyncgetGridOffsetRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status initialize(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::bmi::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> Asyncinitialize(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(AsyncinitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> PrepareAsyncinitialize(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(PrepareAsyncinitializeRaw(context, request, cq));
    }
    ::grpc::Status update(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> Asyncupdate(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> PrepareAsyncupdate(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(PrepareAsyncupdateRaw(context, request, cq));
    }
    ::grpc::Status updateUntil(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::bmi::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> AsyncupdateUntil(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(AsyncupdateUntilRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> PrepareAsyncupdateUntil(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(PrepareAsyncupdateUntilRaw(context, request, cq));
    }
    ::grpc::Status updateFrac(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::bmi::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> AsyncupdateFrac(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(AsyncupdateFracRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> PrepareAsyncupdateFrac(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(PrepareAsyncupdateFracRaw(context, request, cq));
    }
    ::grpc::Status finalize(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> Asyncfinalize(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(AsyncfinalizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> PrepareAsyncfinalize(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(PrepareAsyncfinalizeRaw(context, request, cq));
    }
    ::grpc::Status runModel(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> AsyncrunModel(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(AsyncrunModelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> PrepareAsyncrunModel(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(PrepareAsyncrunModelRaw(context, request, cq));
    }
    ::grpc::Status getComponentName(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetComponentNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetComponentNameResponse>> AsyncgetComponentName(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetComponentNameResponse>>(AsyncgetComponentNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetComponentNameResponse>> PrepareAsyncgetComponentName(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetComponentNameResponse>>(PrepareAsyncgetComponentNameRaw(context, request, cq));
    }
    ::grpc::Status getInputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNameCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>> AsyncgetInputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>>(AsyncgetInputVarNameCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>> PrepareAsyncgetInputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>>(PrepareAsyncgetInputVarNameCountRaw(context, request, cq));
    }
    ::grpc::Status getOutputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNameCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>> AsyncgetOutputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>>(AsyncgetOutputVarNameCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>> PrepareAsyncgetOutputVarNameCount(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>>(PrepareAsyncgetOutputVarNameCountRaw(context, request, cq));
    }
    ::grpc::Status getInputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNamesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>> AsyncgetInputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>>(AsyncgetInputVarNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>> PrepareAsyncgetInputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>>(PrepareAsyncgetInputVarNamesRaw(context, request, cq));
    }
    ::grpc::Status getOutputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetVarNamesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>> AsyncgetOutputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>>(AsyncgetOutputVarNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>> PrepareAsyncgetOutputVarNames(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>>(PrepareAsyncgetOutputVarNamesRaw(context, request, cq));
    }
    ::grpc::Status getTimeUnits(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeUnitsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeUnitsResponse>> AsyncgetTimeUnits(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeUnitsResponse>>(AsyncgetTimeUnitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeUnitsResponse>> PrepareAsyncgetTimeUnits(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeUnitsResponse>>(PrepareAsyncgetTimeUnitsRaw(context, request, cq));
    }
    ::grpc::Status getTimeStep(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeStepResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeStepResponse>> AsyncgetTimeStep(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeStepResponse>>(AsyncgetTimeStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeStepResponse>> PrepareAsyncgetTimeStep(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeStepResponse>>(PrepareAsyncgetTimeStepRaw(context, request, cq));
    }
    ::grpc::Status getCurrentTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>> AsyncgetCurrentTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>>(AsyncgetCurrentTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>> PrepareAsyncgetCurrentTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>>(PrepareAsyncgetCurrentTimeRaw(context, request, cq));
    }
    ::grpc::Status getStartTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>> AsyncgetStartTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>>(AsyncgetStartTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>> PrepareAsyncgetStartTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>>(PrepareAsyncgetStartTimeRaw(context, request, cq));
    }
    ::grpc::Status getEndTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::bmi::GetTimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>> AsyncgetEndTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>>(AsyncgetEndTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>> PrepareAsyncgetEndTime(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>>(PrepareAsyncgetEndTimeRaw(context, request, cq));
    }
    ::grpc::Status getVarGrid(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarGridResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarGridResponse>> AsyncgetVarGrid(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarGridResponse>>(AsyncgetVarGridRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarGridResponse>> PrepareAsyncgetVarGrid(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarGridResponse>>(PrepareAsyncgetVarGridRaw(context, request, cq));
    }
    ::grpc::Status getVarType(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarTypeResponse>> AsyncgetVarType(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarTypeResponse>>(AsyncgetVarTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarTypeResponse>> PrepareAsyncgetVarType(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarTypeResponse>>(PrepareAsyncgetVarTypeRaw(context, request, cq));
    }
    ::grpc::Status getVarItemSize(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarItemSizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarItemSizeResponse>> AsyncgetVarItemSize(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarItemSizeResponse>>(AsyncgetVarItemSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarItemSizeResponse>> PrepareAsyncgetVarItemSize(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarItemSizeResponse>>(PrepareAsyncgetVarItemSizeRaw(context, request, cq));
    }
    ::grpc::Status getVarUnits(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarUnitsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarUnitsResponse>> AsyncgetVarUnits(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarUnitsResponse>>(AsyncgetVarUnitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarUnitsResponse>> PrepareAsyncgetVarUnits(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarUnitsResponse>>(PrepareAsyncgetVarUnitsRaw(context, request, cq));
    }
    ::grpc::Status getVarNBytes(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetVarNBytesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNBytesResponse>> AsyncgetVarNBytes(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNBytesResponse>>(AsyncgetVarNBytesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNBytesResponse>> PrepareAsyncgetVarNBytes(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNBytesResponse>>(PrepareAsyncgetVarNBytesRaw(context, request, cq));
    }
    ::grpc::Status getValue(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::GetValueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetValueResponse>> AsyncgetValue(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetValueResponse>>(AsyncgetValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetValueResponse>> PrepareAsyncgetValue(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetValueResponse>>(PrepareAsyncgetValueRaw(context, request, cq));
    }
    ::grpc::Status getValuePtr(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::bmi::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> AsyncgetValuePtr(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(AsyncgetValuePtrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> PrepareAsyncgetValuePtr(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(PrepareAsyncgetValuePtrRaw(context, request, cq));
    }
    ::grpc::Status getValueAtIndices(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::bmi::GetValueAtIndicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetValueAtIndicesResponse>> AsyncgetValueAtIndices(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetValueAtIndicesResponse>>(AsyncgetValueAtIndicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetValueAtIndicesResponse>> PrepareAsyncgetValueAtIndices(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetValueAtIndicesResponse>>(PrepareAsyncgetValueAtIndicesRaw(context, request, cq));
    }
    ::grpc::Status setValue(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::bmi::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> AsyncsetValue(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(AsyncsetValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> PrepareAsyncsetValue(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(PrepareAsyncsetValueRaw(context, request, cq));
    }
    ::grpc::Status setValuePtr(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::bmi::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> AsyncsetValuePtr(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(AsyncsetValuePtrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> PrepareAsyncsetValuePtr(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(PrepareAsyncsetValuePtrRaw(context, request, cq));
    }
    ::grpc::Status setValueAtIndices(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::bmi::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> AsyncsetValueAtIndices(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(AsyncsetValueAtIndicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>> PrepareAsyncsetValueAtIndices(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::Empty>>(PrepareAsyncsetValueAtIndicesRaw(context, request, cq));
    }
    ::grpc::Status getGridSize(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridSizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSizeResponse>> AsyncgetGridSize(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSizeResponse>>(AsyncgetGridSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSizeResponse>> PrepareAsyncgetGridSize(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSizeResponse>>(PrepareAsyncgetGridSizeRaw(context, request, cq));
    }
    ::grpc::Status getGridType(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridTypeResponse>> AsyncgetGridType(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridTypeResponse>>(AsyncgetGridTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridTypeResponse>> PrepareAsyncgetGridType(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridTypeResponse>>(PrepareAsyncgetGridTypeRaw(context, request, cq));
    }
    ::grpc::Status getGridRank(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridRankResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridRankResponse>> AsyncgetGridRank(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridRankResponse>>(AsyncgetGridRankRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridRankResponse>> PrepareAsyncgetGridRank(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridRankResponse>>(PrepareAsyncgetGridRankRaw(context, request, cq));
    }
    ::grpc::Status getGridShape(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridShapeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridShapeResponse>> AsyncgetGridShape(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridShapeResponse>>(AsyncgetGridShapeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridShapeResponse>> PrepareAsyncgetGridShape(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridShapeResponse>>(PrepareAsyncgetGridShapeRaw(context, request, cq));
    }
    ::grpc::Status getGridSpacing(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridSpacingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSpacingResponse>> AsyncgetGridSpacing(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSpacingResponse>>(AsyncgetGridSpacingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSpacingResponse>> PrepareAsyncgetGridSpacing(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSpacingResponse>>(PrepareAsyncgetGridSpacingRaw(context, request, cq));
    }
    ::grpc::Status getGridOrigin(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridOriginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOriginResponse>> AsyncgetGridOrigin(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOriginResponse>>(AsyncgetGridOriginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOriginResponse>> PrepareAsyncgetGridOrigin(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOriginResponse>>(PrepareAsyncgetGridOriginRaw(context, request, cq));
    }
    ::grpc::Status getGridX(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridPointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>> AsyncgetGridX(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>>(AsyncgetGridXRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>> PrepareAsyncgetGridX(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>>(PrepareAsyncgetGridXRaw(context, request, cq));
    }
    ::grpc::Status getGridY(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridPointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>> AsyncgetGridY(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>>(AsyncgetGridYRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>> PrepareAsyncgetGridY(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>>(PrepareAsyncgetGridYRaw(context, request, cq));
    }
    ::grpc::Status getGridZ(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridPointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>> AsyncgetGridZ(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>>(AsyncgetGridZRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>> PrepareAsyncgetGridZ(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>>(PrepareAsyncgetGridZRaw(context, request, cq));
    }
    ::grpc::Status getGridCellCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>> AsyncgetGridCellCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>>(AsyncgetGridCellCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>> PrepareAsyncgetGridCellCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>>(PrepareAsyncgetGridCellCountRaw(context, request, cq));
    }
    ::grpc::Status getGridPointCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>> AsyncgetGridPointCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>>(AsyncgetGridPointCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>> PrepareAsyncgetGridPointCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>>(PrepareAsyncgetGridPointCountRaw(context, request, cq));
    }
    ::grpc::Status getGridVertexCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetCountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>> AsyncgetGridVertexCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>>(AsyncgetGridVertexCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>> PrepareAsyncgetGridVertexCount(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>>(PrepareAsyncgetGridVertexCountRaw(context, request, cq));
    }
    ::grpc::Status getGridConnectivity(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridConnectivityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridConnectivityResponse>> AsyncgetGridConnectivity(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridConnectivityResponse>>(AsyncgetGridConnectivityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridConnectivityResponse>> PrepareAsyncgetGridConnectivity(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridConnectivityResponse>>(PrepareAsyncgetGridConnectivityRaw(context, request, cq));
    }
    ::grpc::Status getGridOffset(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::bmi::GetGridOffsetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOffsetResponse>> AsyncgetGridOffset(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOffsetResponse>>(AsyncgetGridOffsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOffsetResponse>> PrepareAsyncgetGridOffset(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOffsetResponse>>(PrepareAsyncgetGridOffsetRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* AsyncinitializeRaw(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* PrepareAsyncinitializeRaw(::grpc::ClientContext* context, const ::bmi::InitializeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* AsyncupdateRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* AsyncupdateUntilRaw(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* PrepareAsyncupdateUntilRaw(::grpc::ClientContext* context, const ::bmi::UpdateUntilRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* AsyncupdateFracRaw(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* PrepareAsyncupdateFracRaw(::grpc::ClientContext* context, const ::bmi::UpdateFracRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* AsyncfinalizeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* PrepareAsyncfinalizeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* AsyncrunModelRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* PrepareAsyncrunModelRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetComponentNameResponse>* AsyncgetComponentNameRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetComponentNameResponse>* PrepareAsyncgetComponentNameRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>* AsyncgetInputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>* PrepareAsyncgetInputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>* AsyncgetOutputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNameCountResponse>* PrepareAsyncgetOutputVarNameCountRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>* AsyncgetInputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>* PrepareAsyncgetInputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>* AsyncgetOutputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNamesResponse>* PrepareAsyncgetOutputVarNamesRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeUnitsResponse>* AsyncgetTimeUnitsRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeUnitsResponse>* PrepareAsyncgetTimeUnitsRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeStepResponse>* AsyncgetTimeStepRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeStepResponse>* PrepareAsyncgetTimeStepRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* AsyncgetCurrentTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* PrepareAsyncgetCurrentTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* AsyncgetStartTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* PrepareAsyncgetStartTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* AsyncgetEndTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetTimeResponse>* PrepareAsyncgetEndTimeRaw(::grpc::ClientContext* context, const ::bmi::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarGridResponse>* AsyncgetVarGridRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarGridResponse>* PrepareAsyncgetVarGridRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarTypeResponse>* AsyncgetVarTypeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarTypeResponse>* PrepareAsyncgetVarTypeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarItemSizeResponse>* AsyncgetVarItemSizeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarItemSizeResponse>* PrepareAsyncgetVarItemSizeRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarUnitsResponse>* AsyncgetVarUnitsRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarUnitsResponse>* PrepareAsyncgetVarUnitsRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNBytesResponse>* AsyncgetVarNBytesRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetVarNBytesResponse>* PrepareAsyncgetVarNBytesRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetValueResponse>* AsyncgetValueRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetValueResponse>* PrepareAsyncgetValueRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* AsyncgetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* PrepareAsyncgetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::GetVarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetValueAtIndicesResponse>* AsyncgetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetValueAtIndicesResponse>* PrepareAsyncgetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::GetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* AsyncsetValueRaw(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* PrepareAsyncsetValueRaw(::grpc::ClientContext* context, const ::bmi::SetValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* AsyncsetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* PrepareAsyncsetValuePtrRaw(::grpc::ClientContext* context, const ::bmi::SetValuePtrRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* AsyncsetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::Empty>* PrepareAsyncsetValueAtIndicesRaw(::grpc::ClientContext* context, const ::bmi::SetValueAtIndicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSizeResponse>* AsyncgetGridSizeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSizeResponse>* PrepareAsyncgetGridSizeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridTypeResponse>* AsyncgetGridTypeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridTypeResponse>* PrepareAsyncgetGridTypeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridRankResponse>* AsyncgetGridRankRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridRankResponse>* PrepareAsyncgetGridRankRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridShapeResponse>* AsyncgetGridShapeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridShapeResponse>* PrepareAsyncgetGridShapeRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSpacingResponse>* AsyncgetGridSpacingRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridSpacingResponse>* PrepareAsyncgetGridSpacingRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOriginResponse>* AsyncgetGridOriginRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOriginResponse>* PrepareAsyncgetGridOriginRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* AsyncgetGridXRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* PrepareAsyncgetGridXRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* AsyncgetGridYRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* PrepareAsyncgetGridYRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* AsyncgetGridZRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridPointsResponse>* PrepareAsyncgetGridZRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* AsyncgetGridCellCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* PrepareAsyncgetGridCellCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* AsyncgetGridPointCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* PrepareAsyncgetGridPointCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* AsyncgetGridVertexCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetCountResponse>* PrepareAsyncgetGridVertexCountRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridConnectivityResponse>* AsyncgetGridConnectivityRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridConnectivityResponse>* PrepareAsyncgetGridConnectivityRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOffsetResponse>* AsyncgetGridOffsetRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bmi::GetGridOffsetResponse>* PrepareAsyncgetGridOffsetRaw(::grpc::ClientContext* context, const ::bmi::GridRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_initialize_;
    const ::grpc::internal::RpcMethod rpcmethod_update_;
    const ::grpc::internal::RpcMethod rpcmethod_updateUntil_;
    const ::grpc::internal::RpcMethod rpcmethod_updateFrac_;
    const ::grpc::internal::RpcMethod rpcmethod_finalize_;
    const ::grpc::internal::RpcMethod rpcmethod_runModel_;
    const ::grpc::internal::RpcMethod rpcmethod_getComponentName_;
    const ::grpc::internal::RpcMethod rpcmethod_getInputVarNameCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getOutputVarNameCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getInputVarNames_;
    const ::grpc::internal::RpcMethod rpcmethod_getOutputVarNames_;
    const ::grpc::internal::RpcMethod rpcmethod_getTimeUnits_;
    const ::grpc::internal::RpcMethod rpcmethod_getTimeStep_;
    const ::grpc::internal::RpcMethod rpcmethod_getCurrentTime_;
    const ::grpc::internal::RpcMethod rpcmethod_getStartTime_;
    const ::grpc::internal::RpcMethod rpcmethod_getEndTime_;
    const ::grpc::internal::RpcMethod rpcmethod_getVarGrid_;
    const ::grpc::internal::RpcMethod rpcmethod_getVarType_;
    const ::grpc::internal::RpcMethod rpcmethod_getVarItemSize_;
    const ::grpc::internal::RpcMethod rpcmethod_getVarUnits_;
    const ::grpc::internal::RpcMethod rpcmethod_getVarNBytes_;
    const ::grpc::internal::RpcMethod rpcmethod_getValue_;
    const ::grpc::internal::RpcMethod rpcmethod_getValuePtr_;
    const ::grpc::internal::RpcMethod rpcmethod_getValueAtIndices_;
    const ::grpc::internal::RpcMethod rpcmethod_setValue_;
    const ::grpc::internal::RpcMethod rpcmethod_setValuePtr_;
    const ::grpc::internal::RpcMethod rpcmethod_setValueAtIndices_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridSize_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridType_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridRank_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridShape_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridSpacing_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridOrigin_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridX_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridY_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridZ_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridCellCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridPointCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridVertexCount_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridConnectivity_;
    const ::grpc::internal::RpcMethod rpcmethod_getGridOffset_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status initialize(::grpc::ServerContext* context, const ::bmi::InitializeRequest* request, ::bmi::Empty* response);
    virtual ::grpc::Status update(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response);
    virtual ::grpc::Status updateUntil(::grpc::ServerContext* context, const ::bmi::UpdateUntilRequest* request, ::bmi::Empty* response);
    virtual ::grpc::Status updateFrac(::grpc::ServerContext* context, const ::bmi::UpdateFracRequest* request, ::bmi::Empty* response);
    virtual ::grpc::Status finalize(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response);
    virtual ::grpc::Status runModel(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response);
    virtual ::grpc::Status getComponentName(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetComponentNameResponse* response);
    virtual ::grpc::Status getInputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response);
    virtual ::grpc::Status getOutputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response);
    virtual ::grpc::Status getInputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response);
    virtual ::grpc::Status getOutputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response);
    virtual ::grpc::Status getTimeUnits(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeUnitsResponse* response);
    virtual ::grpc::Status getTimeStep(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeStepResponse* response);
    virtual ::grpc::Status getCurrentTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response);
    virtual ::grpc::Status getStartTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response);
    virtual ::grpc::Status getEndTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response);
    virtual ::grpc::Status getVarGrid(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarGridResponse* response);
    virtual ::grpc::Status getVarType(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarTypeResponse* response);
    virtual ::grpc::Status getVarItemSize(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarItemSizeResponse* response);
    virtual ::grpc::Status getVarUnits(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarUnitsResponse* response);
    virtual ::grpc::Status getVarNBytes(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarNBytesResponse* response);
    virtual ::grpc::Status getValue(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetValueResponse* response);
    virtual ::grpc::Status getValuePtr(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::Empty* response);
    virtual ::grpc::Status getValueAtIndices(::grpc::ServerContext* context, const ::bmi::GetValueAtIndicesRequest* request, ::bmi::GetValueAtIndicesResponse* response);
    virtual ::grpc::Status setValue(::grpc::ServerContext* context, const ::bmi::SetValueRequest* request, ::bmi::Empty* response);
    virtual ::grpc::Status setValuePtr(::grpc::ServerContext* context, const ::bmi::SetValuePtrRequest* request, ::bmi::Empty* response);
    virtual ::grpc::Status setValueAtIndices(::grpc::ServerContext* context, const ::bmi::SetValueAtIndicesRequest* request, ::bmi::Empty* response);
    virtual ::grpc::Status getGridSize(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSizeResponse* response);
    virtual ::grpc::Status getGridType(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridTypeResponse* response);
    virtual ::grpc::Status getGridRank(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridRankResponse* response);
    virtual ::grpc::Status getGridShape(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridShapeResponse* response);
    virtual ::grpc::Status getGridSpacing(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSpacingResponse* response);
    virtual ::grpc::Status getGridOrigin(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOriginResponse* response);
    virtual ::grpc::Status getGridX(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response);
    virtual ::grpc::Status getGridY(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response);
    virtual ::grpc::Status getGridZ(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response);
    virtual ::grpc::Status getGridCellCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response);
    virtual ::grpc::Status getGridPointCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response);
    virtual ::grpc::Status getGridVertexCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response);
    virtual ::grpc::Status getGridConnectivity(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridConnectivityResponse* response);
    virtual ::grpc::Status getGridOffset(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOffsetResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_initialize() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status initialize(::grpc::ServerContext* context, const ::bmi::InitializeRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinitialize(::grpc::ServerContext* context, ::bmi::InitializeRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateUntil : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_updateUntil() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_updateUntil() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateUntil(::grpc::ServerContext* context, const ::bmi::UpdateUntilRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateUntil(::grpc::ServerContext* context, ::bmi::UpdateUntilRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateFrac : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_updateFrac() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_updateFrac() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateFrac(::grpc::ServerContext* context, const ::bmi::UpdateFracRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateFrac(::grpc::ServerContext* context, ::bmi::UpdateFracRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_finalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_finalize() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_finalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finalize(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfinalize(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_runModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_runModel() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_runModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runModel(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrunModel(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getComponentName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getComponentName() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getComponentName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getComponentName(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetComponentNameResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetComponentName(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetComponentNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getInputVarNameCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getInputVarNameCount() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getInputVarNameCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getInputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetInputVarNameCount(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetVarNameCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getOutputVarNameCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getOutputVarNameCount() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getOutputVarNameCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getOutputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetOutputVarNameCount(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetVarNameCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getInputVarNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getInputVarNames() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getInputVarNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getInputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetInputVarNames(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetVarNamesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getOutputVarNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getOutputVarNames() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_getOutputVarNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getOutputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetOutputVarNames(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetVarNamesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTimeUnits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getTimeUnits() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_getTimeUnits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTimeUnits(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeUnitsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTimeUnits(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetTimeUnitsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTimeStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getTimeStep() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_getTimeStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTimeStep(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeStepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTimeStep(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetTimeStepResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCurrentTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getCurrentTime() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_getCurrentTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCurrentTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCurrentTime(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetTimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getStartTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getStartTime() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_getStartTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStartTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStartTime(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetTimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getEndTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getEndTime() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_getEndTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEndTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEndTime(::grpc::ServerContext* context, ::bmi::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetTimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getVarGrid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getVarGrid() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_getVarGrid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarGrid(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarGridResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVarGrid(::grpc::ServerContext* context, ::bmi::GetVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetVarGridResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getVarType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getVarType() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_getVarType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarType(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarTypeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVarType(::grpc::ServerContext* context, ::bmi::GetVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetVarTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getVarItemSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getVarItemSize() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_getVarItemSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarItemSize(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarItemSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVarItemSize(::grpc::ServerContext* context, ::bmi::GetVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetVarItemSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getVarUnits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getVarUnits() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_getVarUnits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarUnits(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarUnitsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVarUnits(::grpc::ServerContext* context, ::bmi::GetVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetVarUnitsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getVarNBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getVarNBytes() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_getVarNBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarNBytes(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarNBytesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVarNBytes(::grpc::ServerContext* context, ::bmi::GetVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetVarNBytesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getValue() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_getValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getValue(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetValue(::grpc::ServerContext* context, ::bmi::GetVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetValueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getValuePtr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getValuePtr() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_getValuePtr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getValuePtr(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetValuePtr(::grpc::ServerContext* context, ::bmi::GetVarRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getValueAtIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getValueAtIndices() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_getValueAtIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getValueAtIndices(::grpc::ServerContext* context, const ::bmi::GetValueAtIndicesRequest* request, ::bmi::GetValueAtIndicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetValueAtIndices(::grpc::ServerContext* context, ::bmi::GetValueAtIndicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetValueAtIndicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setValue() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_setValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setValue(::grpc::ServerContext* context, const ::bmi::SetValueRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetValue(::grpc::ServerContext* context, ::bmi::SetValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setValuePtr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setValuePtr() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_setValuePtr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setValuePtr(::grpc::ServerContext* context, const ::bmi::SetValuePtrRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetValuePtr(::grpc::ServerContext* context, ::bmi::SetValuePtrRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setValueAtIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setValueAtIndices() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_setValueAtIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setValueAtIndices(::grpc::ServerContext* context, const ::bmi::SetValueAtIndicesRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetValueAtIndices(::grpc::ServerContext* context, ::bmi::SetValueAtIndicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridSize() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_getGridSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridSize(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridSize(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetGridSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridType() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_getGridType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridType(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridTypeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridType(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetGridTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridRank : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridRank() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_getGridRank() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridRank(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridRankResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridRank(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetGridRankResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridShape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridShape() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_getGridShape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridShape(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridShapeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridShape(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetGridShapeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridSpacing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridSpacing() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_getGridSpacing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridSpacing(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSpacingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridSpacing(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetGridSpacingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridOrigin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridOrigin() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_getGridOrigin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridOrigin(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOriginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridOrigin(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetGridOriginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridX : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridX() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_getGridX() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridX(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridX(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetGridPointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridY : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridY() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_getGridY() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridY(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridY(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetGridPointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridZ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridZ() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_getGridZ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridZ(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridZ(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetGridPointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridCellCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridCellCount() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_getGridCellCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridCellCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridCellCount(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridPointCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridPointCount() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_getGridPointCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridPointCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridPointCount(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridVertexCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridVertexCount() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_getGridVertexCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridVertexCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridVertexCount(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetCountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridConnectivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridConnectivity() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_getGridConnectivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridConnectivity(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridConnectivityResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridConnectivity(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetGridConnectivityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGridOffset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getGridOffset() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_getGridOffset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridOffset(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOffsetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridOffset(::grpc::ServerContext* context, ::bmi::GridRequest* request, ::grpc::ServerAsyncResponseWriter< ::bmi::GetGridOffsetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_initialize<WithAsyncMethod_update<WithAsyncMethod_updateUntil<WithAsyncMethod_updateFrac<WithAsyncMethod_finalize<WithAsyncMethod_runModel<WithAsyncMethod_getComponentName<WithAsyncMethod_getInputVarNameCount<WithAsyncMethod_getOutputVarNameCount<WithAsyncMethod_getInputVarNames<WithAsyncMethod_getOutputVarNames<WithAsyncMethod_getTimeUnits<WithAsyncMethod_getTimeStep<WithAsyncMethod_getCurrentTime<WithAsyncMethod_getStartTime<WithAsyncMethod_getEndTime<WithAsyncMethod_getVarGrid<WithAsyncMethod_getVarType<WithAsyncMethod_getVarItemSize<WithAsyncMethod_getVarUnits<WithAsyncMethod_getVarNBytes<WithAsyncMethod_getValue<WithAsyncMethod_getValuePtr<WithAsyncMethod_getValueAtIndices<WithAsyncMethod_setValue<WithAsyncMethod_setValuePtr<WithAsyncMethod_setValueAtIndices<WithAsyncMethod_getGridSize<WithAsyncMethod_getGridType<WithAsyncMethod_getGridRank<WithAsyncMethod_getGridShape<WithAsyncMethod_getGridSpacing<WithAsyncMethod_getGridOrigin<WithAsyncMethod_getGridX<WithAsyncMethod_getGridY<WithAsyncMethod_getGridZ<WithAsyncMethod_getGridCellCount<WithAsyncMethod_getGridPointCount<WithAsyncMethod_getGridVertexCount<WithAsyncMethod_getGridConnectivity<WithAsyncMethod_getGridOffset<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_initialize() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status initialize(::grpc::ServerContext* context, const ::bmi::InitializeRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateUntil : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_updateUntil() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_updateUntil() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateUntil(::grpc::ServerContext* context, const ::bmi::UpdateUntilRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateFrac : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_updateFrac() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_updateFrac() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateFrac(::grpc::ServerContext* context, const ::bmi::UpdateFracRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_finalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_finalize() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_finalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finalize(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_runModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_runModel() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_runModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runModel(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getComponentName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getComponentName() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getComponentName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getComponentName(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetComponentNameResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getInputVarNameCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getInputVarNameCount() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getInputVarNameCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getInputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getOutputVarNameCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getOutputVarNameCount() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getOutputVarNameCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getOutputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getInputVarNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getInputVarNames() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getInputVarNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getInputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getOutputVarNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getOutputVarNames() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_getOutputVarNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getOutputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTimeUnits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getTimeUnits() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_getTimeUnits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTimeUnits(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeUnitsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTimeStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getTimeStep() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_getTimeStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTimeStep(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeStepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCurrentTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getCurrentTime() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_getCurrentTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCurrentTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getStartTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getStartTime() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_getStartTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStartTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getEndTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getEndTime() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_getEndTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEndTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getVarGrid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getVarGrid() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_getVarGrid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarGrid(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarGridResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getVarType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getVarType() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_getVarType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarType(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarTypeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getVarItemSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getVarItemSize() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_getVarItemSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarItemSize(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarItemSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getVarUnits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getVarUnits() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_getVarUnits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarUnits(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarUnitsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getVarNBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getVarNBytes() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_getVarNBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarNBytes(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarNBytesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getValue() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_getValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getValue(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getValuePtr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getValuePtr() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_getValuePtr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getValuePtr(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getValueAtIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getValueAtIndices() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_getValueAtIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getValueAtIndices(::grpc::ServerContext* context, const ::bmi::GetValueAtIndicesRequest* request, ::bmi::GetValueAtIndicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setValue() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_setValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setValue(::grpc::ServerContext* context, const ::bmi::SetValueRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setValuePtr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setValuePtr() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_setValuePtr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setValuePtr(::grpc::ServerContext* context, const ::bmi::SetValuePtrRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setValueAtIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setValueAtIndices() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_setValueAtIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setValueAtIndices(::grpc::ServerContext* context, const ::bmi::SetValueAtIndicesRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridSize() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_getGridSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridSize(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridType() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_getGridType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridType(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridTypeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridRank : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridRank() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_getGridRank() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridRank(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridRankResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridShape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridShape() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_getGridShape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridShape(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridShapeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridSpacing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridSpacing() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_getGridSpacing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridSpacing(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSpacingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridOrigin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridOrigin() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_getGridOrigin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridOrigin(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOriginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridX : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridX() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_getGridX() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridX(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridY : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridY() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_getGridY() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridY(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridZ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridZ() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_getGridZ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridZ(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridCellCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridCellCount() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_getGridCellCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridCellCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridPointCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridPointCount() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_getGridPointCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridPointCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridVertexCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridVertexCount() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_getGridVertexCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridVertexCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridConnectivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridConnectivity() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_getGridConnectivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridConnectivity(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridConnectivityResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGridOffset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getGridOffset() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_getGridOffset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridOffset(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOffsetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_initialize() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status initialize(::grpc::ServerContext* context, const ::bmi::InitializeRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinitialize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_update() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateUntil : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_updateUntil() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_updateUntil() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateUntil(::grpc::ServerContext* context, const ::bmi::UpdateUntilRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateUntil(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateFrac : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_updateFrac() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_updateFrac() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateFrac(::grpc::ServerContext* context, const ::bmi::UpdateFracRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateFrac(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_finalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_finalize() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_finalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status finalize(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestfinalize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_runModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_runModel() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_runModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status runModel(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrunModel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getComponentName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getComponentName() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getComponentName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getComponentName(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetComponentNameResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetComponentName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getInputVarNameCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getInputVarNameCount() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getInputVarNameCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getInputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetInputVarNameCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getOutputVarNameCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getOutputVarNameCount() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getOutputVarNameCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getOutputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetOutputVarNameCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getInputVarNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getInputVarNames() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getInputVarNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getInputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetInputVarNames(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getOutputVarNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getOutputVarNames() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_getOutputVarNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getOutputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetOutputVarNames(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTimeUnits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getTimeUnits() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_getTimeUnits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTimeUnits(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeUnitsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTimeUnits(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTimeStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getTimeStep() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_getTimeStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTimeStep(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeStepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTimeStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCurrentTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getCurrentTime() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_getCurrentTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCurrentTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCurrentTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getStartTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getStartTime() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_getStartTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStartTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStartTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getEndTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getEndTime() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_getEndTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getEndTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetEndTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getVarGrid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getVarGrid() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_getVarGrid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarGrid(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarGridResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVarGrid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getVarType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getVarType() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_getVarType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarType(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarTypeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVarType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getVarItemSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getVarItemSize() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_getVarItemSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarItemSize(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarItemSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVarItemSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getVarUnits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getVarUnits() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_getVarUnits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarUnits(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarUnitsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVarUnits(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getVarNBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getVarNBytes() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_getVarNBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVarNBytes(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarNBytesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVarNBytes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getValue() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_getValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getValue(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getValuePtr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getValuePtr() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_getValuePtr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getValuePtr(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetValuePtr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getValueAtIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getValueAtIndices() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_getValueAtIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getValueAtIndices(::grpc::ServerContext* context, const ::bmi::GetValueAtIndicesRequest* request, ::bmi::GetValueAtIndicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetValueAtIndices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_setValue() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_setValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setValue(::grpc::ServerContext* context, const ::bmi::SetValueRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setValuePtr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_setValuePtr() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_setValuePtr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setValuePtr(::grpc::ServerContext* context, const ::bmi::SetValuePtrRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetValuePtr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setValueAtIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_setValueAtIndices() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_setValueAtIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setValueAtIndices(::grpc::ServerContext* context, const ::bmi::SetValueAtIndicesRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetValueAtIndices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridSize() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_getGridSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridSize(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridType() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_getGridType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridType(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridTypeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridRank : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridRank() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_getGridRank() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridRank(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridRankResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridRank(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridShape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridShape() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_getGridShape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridShape(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridShapeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridShape(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridSpacing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridSpacing() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_getGridSpacing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridSpacing(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSpacingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridSpacing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridOrigin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridOrigin() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_getGridOrigin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridOrigin(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOriginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridOrigin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridX : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridX() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_getGridX() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridX(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridX(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridY : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridY() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_getGridY() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridY(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridY(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridZ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridZ() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_getGridZ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridZ(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridZ(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridCellCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridCellCount() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_getGridCellCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridCellCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridCellCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridPointCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridPointCount() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_getGridPointCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridPointCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridPointCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridVertexCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridVertexCount() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_getGridVertexCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridVertexCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridVertexCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridConnectivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridConnectivity() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_getGridConnectivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridConnectivity(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridConnectivityResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridConnectivity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGridOffset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getGridOffset() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_getGridOffset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGridOffset(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOffsetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGridOffset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_initialize() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::InitializeRequest, ::bmi::Empty>(std::bind(&WithStreamedUnaryMethod_initialize<BaseClass>::Streamedinitialize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status initialize(::grpc::ServerContext* context, const ::bmi::InitializeRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinitialize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::InitializeRequest,::bmi::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_update() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::Empty>(std::bind(&WithStreamedUnaryMethod_update<BaseClass>::Streamedupdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedupdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateUntil : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_updateUntil() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::UpdateUntilRequest, ::bmi::Empty>(std::bind(&WithStreamedUnaryMethod_updateUntil<BaseClass>::StreamedupdateUntil, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_updateUntil() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateUntil(::grpc::ServerContext* context, const ::bmi::UpdateUntilRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateUntil(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::UpdateUntilRequest,::bmi::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updateFrac : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_updateFrac() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::UpdateFracRequest, ::bmi::Empty>(std::bind(&WithStreamedUnaryMethod_updateFrac<BaseClass>::StreamedupdateFrac, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_updateFrac() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updateFrac(::grpc::ServerContext* context, const ::bmi::UpdateFracRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdateFrac(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::UpdateFracRequest,::bmi::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_finalize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_finalize() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::Empty>(std::bind(&WithStreamedUnaryMethod_finalize<BaseClass>::Streamedfinalize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_finalize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status finalize(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedfinalize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_runModel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_runModel() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::Empty>(std::bind(&WithStreamedUnaryMethod_runModel<BaseClass>::StreamedrunModel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_runModel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status runModel(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrunModel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getComponentName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getComponentName() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::GetComponentNameResponse>(std::bind(&WithStreamedUnaryMethod_getComponentName<BaseClass>::StreamedgetComponentName, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getComponentName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getComponentName(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetComponentNameResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetComponentName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::GetComponentNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getInputVarNameCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getInputVarNameCount() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::GetVarNameCountResponse>(std::bind(&WithStreamedUnaryMethod_getInputVarNameCount<BaseClass>::StreamedgetInputVarNameCount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getInputVarNameCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getInputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetInputVarNameCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::GetVarNameCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getOutputVarNameCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getOutputVarNameCount() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::GetVarNameCountResponse>(std::bind(&WithStreamedUnaryMethod_getOutputVarNameCount<BaseClass>::StreamedgetOutputVarNameCount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getOutputVarNameCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getOutputVarNameCount(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNameCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetOutputVarNameCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::GetVarNameCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getInputVarNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getInputVarNames() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::GetVarNamesResponse>(std::bind(&WithStreamedUnaryMethod_getInputVarNames<BaseClass>::StreamedgetInputVarNames, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getInputVarNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getInputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetInputVarNames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::GetVarNamesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getOutputVarNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getOutputVarNames() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::GetVarNamesResponse>(std::bind(&WithStreamedUnaryMethod_getOutputVarNames<BaseClass>::StreamedgetOutputVarNames, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getOutputVarNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getOutputVarNames(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetVarNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetOutputVarNames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::GetVarNamesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTimeUnits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getTimeUnits() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::GetTimeUnitsResponse>(std::bind(&WithStreamedUnaryMethod_getTimeUnits<BaseClass>::StreamedgetTimeUnits, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getTimeUnits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTimeUnits(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeUnitsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTimeUnits(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::GetTimeUnitsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTimeStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getTimeStep() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::GetTimeStepResponse>(std::bind(&WithStreamedUnaryMethod_getTimeStep<BaseClass>::StreamedgetTimeStep, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getTimeStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTimeStep(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeStepResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTimeStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::GetTimeStepResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCurrentTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getCurrentTime() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::GetTimeResponse>(std::bind(&WithStreamedUnaryMethod_getCurrentTime<BaseClass>::StreamedgetCurrentTime, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getCurrentTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCurrentTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCurrentTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::GetTimeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getStartTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getStartTime() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::GetTimeResponse>(std::bind(&WithStreamedUnaryMethod_getStartTime<BaseClass>::StreamedgetStartTime, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getStartTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getStartTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetStartTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::GetTimeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getEndTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getEndTime() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::Empty, ::bmi::GetTimeResponse>(std::bind(&WithStreamedUnaryMethod_getEndTime<BaseClass>::StreamedgetEndTime, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getEndTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getEndTime(::grpc::ServerContext* context, const ::bmi::Empty* request, ::bmi::GetTimeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetEndTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::Empty,::bmi::GetTimeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getVarGrid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getVarGrid() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GetVarRequest, ::bmi::GetVarGridResponse>(std::bind(&WithStreamedUnaryMethod_getVarGrid<BaseClass>::StreamedgetVarGrid, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getVarGrid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getVarGrid(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarGridResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetVarGrid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GetVarRequest,::bmi::GetVarGridResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getVarType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getVarType() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GetVarRequest, ::bmi::GetVarTypeResponse>(std::bind(&WithStreamedUnaryMethod_getVarType<BaseClass>::StreamedgetVarType, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getVarType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getVarType(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarTypeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetVarType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GetVarRequest,::bmi::GetVarTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getVarItemSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getVarItemSize() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GetVarRequest, ::bmi::GetVarItemSizeResponse>(std::bind(&WithStreamedUnaryMethod_getVarItemSize<BaseClass>::StreamedgetVarItemSize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getVarItemSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getVarItemSize(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarItemSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetVarItemSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GetVarRequest,::bmi::GetVarItemSizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getVarUnits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getVarUnits() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GetVarRequest, ::bmi::GetVarUnitsResponse>(std::bind(&WithStreamedUnaryMethod_getVarUnits<BaseClass>::StreamedgetVarUnits, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getVarUnits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getVarUnits(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarUnitsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetVarUnits(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GetVarRequest,::bmi::GetVarUnitsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getVarNBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getVarNBytes() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GetVarRequest, ::bmi::GetVarNBytesResponse>(std::bind(&WithStreamedUnaryMethod_getVarNBytes<BaseClass>::StreamedgetVarNBytes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getVarNBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getVarNBytes(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetVarNBytesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetVarNBytes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GetVarRequest,::bmi::GetVarNBytesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getValue() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GetVarRequest, ::bmi::GetValueResponse>(std::bind(&WithStreamedUnaryMethod_getValue<BaseClass>::StreamedgetValue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getValue(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::GetValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GetVarRequest,::bmi::GetValueResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getValuePtr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getValuePtr() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GetVarRequest, ::bmi::Empty>(std::bind(&WithStreamedUnaryMethod_getValuePtr<BaseClass>::StreamedgetValuePtr, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getValuePtr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getValuePtr(::grpc::ServerContext* context, const ::bmi::GetVarRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetValuePtr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GetVarRequest,::bmi::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getValueAtIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getValueAtIndices() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GetValueAtIndicesRequest, ::bmi::GetValueAtIndicesResponse>(std::bind(&WithStreamedUnaryMethod_getValueAtIndices<BaseClass>::StreamedgetValueAtIndices, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getValueAtIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getValueAtIndices(::grpc::ServerContext* context, const ::bmi::GetValueAtIndicesRequest* request, ::bmi::GetValueAtIndicesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetValueAtIndices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GetValueAtIndicesRequest,::bmi::GetValueAtIndicesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setValue() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::SetValueRequest, ::bmi::Empty>(std::bind(&WithStreamedUnaryMethod_setValue<BaseClass>::StreamedsetValue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setValue(::grpc::ServerContext* context, const ::bmi::SetValueRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::SetValueRequest,::bmi::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setValuePtr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setValuePtr() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::SetValuePtrRequest, ::bmi::Empty>(std::bind(&WithStreamedUnaryMethod_setValuePtr<BaseClass>::StreamedsetValuePtr, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setValuePtr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setValuePtr(::grpc::ServerContext* context, const ::bmi::SetValuePtrRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetValuePtr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::SetValuePtrRequest,::bmi::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setValueAtIndices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setValueAtIndices() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::SetValueAtIndicesRequest, ::bmi::Empty>(std::bind(&WithStreamedUnaryMethod_setValueAtIndices<BaseClass>::StreamedsetValueAtIndices, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setValueAtIndices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setValueAtIndices(::grpc::ServerContext* context, const ::bmi::SetValueAtIndicesRequest* request, ::bmi::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetValueAtIndices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::SetValueAtIndicesRequest,::bmi::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridSize() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetGridSizeResponse>(std::bind(&WithStreamedUnaryMethod_getGridSize<BaseClass>::StreamedgetGridSize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridSize(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSizeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetGridSizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridType() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetGridTypeResponse>(std::bind(&WithStreamedUnaryMethod_getGridType<BaseClass>::StreamedgetGridType, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridType(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridTypeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetGridTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridRank : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridRank() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetGridRankResponse>(std::bind(&WithStreamedUnaryMethod_getGridRank<BaseClass>::StreamedgetGridRank, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridRank() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridRank(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridRankResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridRank(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetGridRankResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridShape : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridShape() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetGridShapeResponse>(std::bind(&WithStreamedUnaryMethod_getGridShape<BaseClass>::StreamedgetGridShape, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridShape() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridShape(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridShapeResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridShape(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetGridShapeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridSpacing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridSpacing() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetGridSpacingResponse>(std::bind(&WithStreamedUnaryMethod_getGridSpacing<BaseClass>::StreamedgetGridSpacing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridSpacing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridSpacing(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridSpacingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridSpacing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetGridSpacingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridOrigin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridOrigin() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetGridOriginResponse>(std::bind(&WithStreamedUnaryMethod_getGridOrigin<BaseClass>::StreamedgetGridOrigin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridOrigin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridOrigin(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOriginResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridOrigin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetGridOriginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridX : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridX() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetGridPointsResponse>(std::bind(&WithStreamedUnaryMethod_getGridX<BaseClass>::StreamedgetGridX, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridX() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridX(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridX(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetGridPointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridY : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridY() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetGridPointsResponse>(std::bind(&WithStreamedUnaryMethod_getGridY<BaseClass>::StreamedgetGridY, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridY() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridY(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridY(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetGridPointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridZ : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridZ() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetGridPointsResponse>(std::bind(&WithStreamedUnaryMethod_getGridZ<BaseClass>::StreamedgetGridZ, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridZ() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridZ(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridPointsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridZ(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetGridPointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridCellCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridCellCount() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetCountResponse>(std::bind(&WithStreamedUnaryMethod_getGridCellCount<BaseClass>::StreamedgetGridCellCount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridCellCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridCellCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridCellCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridPointCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridPointCount() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetCountResponse>(std::bind(&WithStreamedUnaryMethod_getGridPointCount<BaseClass>::StreamedgetGridPointCount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridPointCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridPointCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridPointCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridVertexCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridVertexCount() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetCountResponse>(std::bind(&WithStreamedUnaryMethod_getGridVertexCount<BaseClass>::StreamedgetGridVertexCount, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridVertexCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridVertexCount(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetCountResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridVertexCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetCountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridConnectivity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridConnectivity() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetGridConnectivityResponse>(std::bind(&WithStreamedUnaryMethod_getGridConnectivity<BaseClass>::StreamedgetGridConnectivity, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridConnectivity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridConnectivity(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridConnectivityResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridConnectivity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetGridConnectivityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGridOffset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getGridOffset() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler< ::bmi::GridRequest, ::bmi::GetGridOffsetResponse>(std::bind(&WithStreamedUnaryMethod_getGridOffset<BaseClass>::StreamedgetGridOffset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getGridOffset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGridOffset(::grpc::ServerContext* context, const ::bmi::GridRequest* request, ::bmi::GetGridOffsetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGridOffset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bmi::GridRequest,::bmi::GetGridOffsetResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_initialize<WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_updateUntil<WithStreamedUnaryMethod_updateFrac<WithStreamedUnaryMethod_finalize<WithStreamedUnaryMethod_runModel<WithStreamedUnaryMethod_getComponentName<WithStreamedUnaryMethod_getInputVarNameCount<WithStreamedUnaryMethod_getOutputVarNameCount<WithStreamedUnaryMethod_getInputVarNames<WithStreamedUnaryMethod_getOutputVarNames<WithStreamedUnaryMethod_getTimeUnits<WithStreamedUnaryMethod_getTimeStep<WithStreamedUnaryMethod_getCurrentTime<WithStreamedUnaryMethod_getStartTime<WithStreamedUnaryMethod_getEndTime<WithStreamedUnaryMethod_getVarGrid<WithStreamedUnaryMethod_getVarType<WithStreamedUnaryMethod_getVarItemSize<WithStreamedUnaryMethod_getVarUnits<WithStreamedUnaryMethod_getVarNBytes<WithStreamedUnaryMethod_getValue<WithStreamedUnaryMethod_getValuePtr<WithStreamedUnaryMethod_getValueAtIndices<WithStreamedUnaryMethod_setValue<WithStreamedUnaryMethod_setValuePtr<WithStreamedUnaryMethod_setValueAtIndices<WithStreamedUnaryMethod_getGridSize<WithStreamedUnaryMethod_getGridType<WithStreamedUnaryMethod_getGridRank<WithStreamedUnaryMethod_getGridShape<WithStreamedUnaryMethod_getGridSpacing<WithStreamedUnaryMethod_getGridOrigin<WithStreamedUnaryMethod_getGridX<WithStreamedUnaryMethod_getGridY<WithStreamedUnaryMethod_getGridZ<WithStreamedUnaryMethod_getGridCellCount<WithStreamedUnaryMethod_getGridPointCount<WithStreamedUnaryMethod_getGridVertexCount<WithStreamedUnaryMethod_getGridConnectivity<WithStreamedUnaryMethod_getGridOffset<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_initialize<WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_updateUntil<WithStreamedUnaryMethod_updateFrac<WithStreamedUnaryMethod_finalize<WithStreamedUnaryMethod_runModel<WithStreamedUnaryMethod_getComponentName<WithStreamedUnaryMethod_getInputVarNameCount<WithStreamedUnaryMethod_getOutputVarNameCount<WithStreamedUnaryMethod_getInputVarNames<WithStreamedUnaryMethod_getOutputVarNames<WithStreamedUnaryMethod_getTimeUnits<WithStreamedUnaryMethod_getTimeStep<WithStreamedUnaryMethod_getCurrentTime<WithStreamedUnaryMethod_getStartTime<WithStreamedUnaryMethod_getEndTime<WithStreamedUnaryMethod_getVarGrid<WithStreamedUnaryMethod_getVarType<WithStreamedUnaryMethod_getVarItemSize<WithStreamedUnaryMethod_getVarUnits<WithStreamedUnaryMethod_getVarNBytes<WithStreamedUnaryMethod_getValue<WithStreamedUnaryMethod_getValuePtr<WithStreamedUnaryMethod_getValueAtIndices<WithStreamedUnaryMethod_setValue<WithStreamedUnaryMethod_setValuePtr<WithStreamedUnaryMethod_setValueAtIndices<WithStreamedUnaryMethod_getGridSize<WithStreamedUnaryMethod_getGridType<WithStreamedUnaryMethod_getGridRank<WithStreamedUnaryMethod_getGridShape<WithStreamedUnaryMethod_getGridSpacing<WithStreamedUnaryMethod_getGridOrigin<WithStreamedUnaryMethod_getGridX<WithStreamedUnaryMethod_getGridY<WithStreamedUnaryMethod_getGridZ<WithStreamedUnaryMethod_getGridCellCount<WithStreamedUnaryMethod_getGridPointCount<WithStreamedUnaryMethod_getGridVertexCount<WithStreamedUnaryMethod_getGridConnectivity<WithStreamedUnaryMethod_getGridOffset<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace bmi


#endif  // GRPC_bmi_2eproto__INCLUDED
